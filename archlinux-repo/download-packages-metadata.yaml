# The following section will only be used by the local_multi_thread engine

# The main segment
start:

    - tag: { base_dir: $path$ }
    # Tag collection name
    - tag: { collection: Arch Linux Repository }

    # Tag section name and per section mirror base
    - insert: [ community, core, extra ]
    - iterate:
    - tag:
        section: $_$
        meta_dir: $_tag['base_dir']$/packages_metadata/$_$
        mirror_base: https://mirrors.edge.kernel.org/archlinux/$_$/os/x86_64
    - execute: mkdir -p $_tag['meta_dir']$
    - send to segment:
        section_meta_downloader

section_meta_downloader:

    - enable:
        concurrency: 3

    # Generate section db  url
    - insert: $_tag['mirror_base']$/$_tag['section']$.db.tar.gz

    # Download the .db file
    #- print: Downloading file $_$
    - read from url: $_$ # This will produce the .tar.gz content

    # All files in the tar are "desc" files, which contain values/fields
    # in the format %FIELD_NAME%\n.field_content_here....%FIELD_NAME"
    - insert: $content.decode()$  # decoded content to utf-8
    - transform from regex assign: '%(\S*)%\n(.*)'
    - set:
        LICENSE: $_.get('LICENSE', 'N/A')$  # Some packages do not provide a license
    - tag key:  [ARCH, DESC, FILENAME, LICENSE, MD5SUM, NAME, PACKAGER ]

    # Set the filename that we use for the local metadata cache
    - tag: { metadata_filename: "$_tag['meta_dir']$/$_tag['FILENAME']$.json" }

    - read from file status: $_tag['metadata_filename']$
    - send to segment:
        name: download metadata file    # Download metadata
        when: "$ _ == {} $"             # When status is empty(file not found)

download metadata file:
    - enable:
        concurrency: 10
    - insert: { url: "$_tag['mirror_base']$/$_tag['FILENAME']$" }
    - print: Downloading $url$
    - read from url:
        url: $url$
        to_tmp_file: True
    - tag:
            tmp_filename: $_$
    - insert: { url: "$_tag['mirror_base']$/$_tag['FILENAME']$.sig" }
    - read from url:
        url: $url$
        to_tmp_file: True
    - execute:
        command:
            gpg --keyring $_tag['base_dir']$/packages_metadata/archlinux.gpg
            --verify $_$ $_tag.tmp_filename$
        fail_on_error: False
    - send to segment:
        name: verify failed
        when: $return_code != 0$
    - insert: $stderr$
    - transform from regex group:
        signer: 'Good signature from \"([^"]*)'
    - tag key: signer
    - send to segment: export meta data

verify failed:
    - print: Failed $stderr$
    - tag: { signer: Unknown }
    - send to segment: export meta data

export meta data:
    - enable:
        concurrency: 10
    - read from file:
        path: $_tag.tmp_filename$
        mime_type: application/x-tar
        select: .MTREE
    - unlink: $_tag.tmp_filename$
    - insert: $content$
    - decompress: { type: gzip }
    - tag: { MTREE: $ _.decode().splitlines() $ }
    - insert: "$_tag['meta_dir']$/$_tag['FILENAME']$.json"
    - print: Creating metadata file $_$
    - write to file:
        path: $_tag['metadata_filename']$
        content: $_tag$

